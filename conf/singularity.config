import java.io.File;

def checkProfileSingularity(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES){ file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
      System.exit(-1)
    }
  }else{
    println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enabled = true
  autoMounts = true
  runOptions = (params.geniac.containers?.singularityRunOptions ?: '')
}


process {
  checkProfileSingularity("${params.geniac.singularityImagePath}")
  checkBindings()
  withLabel:multiqc{ container = "${params.geniac.singularityImagePath}/multiqc.sif" }
  withLabel:python{ container = "${params.geniac.singularityImagePath}/python.sif" }
  withLabel:R{ container = "${params.geniac.singularityImagePath}/R.sif" }
  withLabel:bedtools{ container = "${params.geniac.singularityImagePath}/bedtools.sif" }
  withLabel:bowtie2{ container = "${params.geniac.singularityImagePath}/bowtie2.sif" }
  withLabel:cutadapt{ container = "${params.geniac.singularityImagePath}/cutadapt.sif" }
  withLabel:deeptools{ container = "${params.geniac.singularityImagePath}/deeptools.sif" }
  withLabel:homer{ container = "${params.geniac.singularityImagePath}/homer.sif" }
  withLabel:samtools{ container = "${params.geniac.singularityImagePath}/samtools.sif" }
  withLabel:star{ conda = "${params.geniac.singularityImagePath}/star.sif" }
  withLabel:bwamem2{ conda = "${params.geniac.singularityImagePath}/bwamem2.sif" }
  withLabel:seqkit{ container = "${params.geniac.singularityImagePath}/seqkit.sif" }
  withLabel:macs2{ container = "${params.geniac.singularityImagePath}/macs2.sif" }
}
