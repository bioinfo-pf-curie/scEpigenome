/*
 * Define modules options
 */


process {

  // Default commenter pour ne pas avoir les dossiers par defauts 
  //publishDir = [
  //  path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
  //  mode: 'copy',
  //  saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //]

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

  // Extract barcodes
  //withName: 'bcAlign10X' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/bcAlign10X" },
  //      mode: 'copy',
  //      pattern: "*Bowtie2.log"
  //    ],
  //    [
  //      path: { "${params.outDir}/bcAlign10X" },
  //      mode: 'copy',
  //      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //    ]
  //  ]
  //  ext.args = '-N 1 -L 8 --rdg 0,7 --rfg 0,7 --mp 7,7 --ignore-quals --score-min L,0,-1 -t --no-unal --no-hd '
  //}

  //withName: 'bcAlign' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/bcAlign" },
  //      mode: 'copy',
  //      pattern: "*ReadsMatchingSorted.txt"
  //    ],
  //    [
  //      path: { "${params.outDir}/bcAlign" },
  //      mode: 'copy',
  //      pattern: "*count_index.txt"
  //    ],
  //    [
  //      path: { "${params.outDir}/bcAlign" },
  //      mode: 'copy',
  //      pattern: "*Bowtie2.log"
  //    ],
  //    [
  //      path: { "${params.outDir}/bcAlign" },
  //      mode: 'copy',
  //      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //    ]
  //  ]
  //  ext.args = '-N 1 -L 8 --rdg 0,7 --rfg 0,7 --mp 7,7 --ignore-quals --score-min L,0,-1 -t --no-unal --no-hd '
  //}

  withName: 'getBarcodes' {
    ext.prefix = { "${meta.id}_${meta.index_id}" }
  }

  withName: 'alignBarcodes' {
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_${metaBc.id}_part${meta.chunk}" : "${meta.id}_${metaBc.id}" }
    ext.args = '-N 1 -L 8 --rdg 0,7 --rfg 0,7 --mp 7,7 --ignore-quals --score-min L,0,-1 -t --no-hd --reorder'
  }

  withName: 'addBarcodes' {
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
  }

  withName: 'joinBcIndexes' {
    publishDir = [
      [
        path: { "${params.outDir}/joinBcIndexes" },
        mode: 'copy',
        pattern: "*_read_barcodes.txt"
      ],
      [
        path: { "${params.outDir}/joinBcIndexes" },
        mode: 'copy',
        pattern: "*_bowtie2.log"
      ]
    ]
  }

  withName: 'cutadapt' {
    ext.prefix = { "${meta.id}_R2" }
    ext.args = { "-u ${params.barcode_linker_length}" }
  }

  //withName: 'bcTrim' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/bcTrim" },
  //      mode: 'copy',
  //      pattern: "*.fastq.gz"
  //    ],
  //    [
  //      path: { "${params.outDir}/bcTrim" },
  //      mode: 'copy',
  //      saveAs: {filename -> "logs/$filename"},
  //      pattern: "*log"
  //    ],
  //    [
  //      path: { "${params.outDir}/bcTrim" },
  //      mode: 'copy',
  //      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //    ]
  //  ]
  //}

  withName: 'starAlign' {
    publishDir = [
      [
        path: { "${params.outDir}/starAlign" },
        mode: 'copy',
        pattern: "*.bam"
      ],
      [
        path: { "${params.outDir}/starAlign" },
        mode: 'copy',
        saveAs: {filename -> "logs/$filename"},
        pattern: "*out"
      ],
      [
        path: { "${params.outDir}/starAlign" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
    ext.args = '--outSAMtype BAM SortedByCoordinate --alignEndsType EndToEnd --winAnchorMultimapNmax 1000  --outFilterMultimapNmax 1 --alignIntronMax 1 --peOverlapNbasesMin 10 --alignMatesGapMax 450 --limitGenomeGenerateRAM 25000000000 '
  }

  withName: 'barcode2rg' {
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
  }

  withName: 'samtoolsFilter' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: "*.bam"
    ]
    ext.prefix = { "${meta.id}" }
    ext.args = [
      params.keepSingleton ? "-F 0x004" : "-F 0x004 -F 0x0008 -f 0x001",
      params.keepDups ? "" : "-F 0x0400",
      params.mapq > 0 ? "-q ${params.mapq}" : ""
    ].join(' ').trim()
  }

  //withName: 'addFlags' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/addFlags" },
  //      mode: 'copy',
  //      pattern: "*.bam"
  //    ]
  //  ]
  //}

  //withName: 'removePCRdup' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*.bam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*.sam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*_count_PCR_duplicates.txt"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*_countR1unmappedR2.txt"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*_flagged.sorted.bam"
  //    ]
  //  ]
  //}

  //withName: 'removePCRdup_cut10x' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*.bam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*.sam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*_count_PCR_duplicates.txt"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*_countR1unmappedR2.txt"
  //    ],
  //    [
  //      path: { "${params.outDir}/removePCRdup" },
  //      mode: 'copy',
  //      pattern: "*_flagged.sorted.bam"
  //    ]
  //  ]
  //}

  //withName: 'removeRTdup' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/removeRTdup" },
  //      mode: 'copy',
  //      pattern: "*.bam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removeRTdup" },
  //      mode: 'copy',
  //      pattern: "*_count_RT_duplicates.txt"
  //    ]
  //  ]
  //}

  //withName: 'removeWindowDup' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/removeWindowDup" },
  //      mode: 'copy',
  //      pattern: "*.bam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removeWindowDup" },
  //      mode: 'copy',
  //      pattern: "*_removeWindowDup.log"
  //    ]
  //  ]
  //}

  //withName: 'removeBlackRegions' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/removeBlackRegions" },
  //      mode: 'copy',
  //      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //    ],
  //    [
  //      path: { "${params.outDir}/removeBlackRegions" },
  //      mode: 'copy',
  //      pattern: "*BlackReg.bam"
  //    ],
  //    [
  //      path: { "${params.outDir}/removeBlackRegions" },
  //      mode: 'copy',
  //      pattern: "*BlackReg.bam.bai"
  //    ],
  //   [
  //      path: { "${params.outDir}/removeBlackRegions" },
  //      mode: 'copy',
  //      pattern: "*_rmDup.txt"
  //    ],
  //    ]
  //}

  //withName: 'countSummary' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/countSummary" },
  //      mode: 'copy',
  //      pattern: "*.log"
  //    ]
  //  ]
  //}

  withName: 'distribUMIs' {
    publishDir = [
      [
        path: { "${params.outDir}/UMIdistribution" },
        mode: 'copy',
        pattern: "*.mqc"
      ],
      [
        path: { "${params.outDir}/UMIdistribution" },
        mode: 'copy',
        pattern: "*.pdf"
      ],
      [
        path: { "${params.outDir}/UMIdistribution" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
  }

  withName: 'bamToFrag' {
    publishDir = [
      [
        path: { "${params.outDir}/FragmentFiles" },
        mode: 'copy',
        pattern: "*.gz"
      ]
    ]
  }

  withName: 'rmBlackList' {
    ext.args = "-v"
  }


  //Subworkflow: countMatrices
  withName: 'countMatricesPerBin' {
    publishDir = [
      [
        path: { "${params.outDir}/BinMatrices" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/BinMatrices" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-f ${params.minReadsPerCellmatrix} --tag XB -v"
  }

  withName: 'countMatricesPerTSS' {
    publishDir = [
      [
        path: { "${params.outDir}/TssMatrices" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/TssMatrices" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-f ${params.minReadsPerCellmatrix} --tag XB -v"
  }

  //Subworkflow: bigwig
  withName: 'deeptoolsBamCoverage' {
    publishDir = [
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        pattern: "*.bigwig"
      ],
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "--normalizeUsing CPM --ignoreForNormalization chrX --binSize 50 --smoothLength 500 --extendReads 150"
  }

  withName: 'deeptoolsComputeMatrix' {
    ext.args = "--downstream 2000 --upstream 2000 --skipZeros --binSize 100"
  }

  // Subworkflow: peakCalling
  withName: 'macs2' {
    publishDir = [
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        pattern: "*.Peak"
      ],
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "--nomodel --extsize 200 --keep-dup all -f BAM ${params.macs2_sharp} "
  }

  withName: 'bedtoolsMergePeaks' {
    publishDir = [
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        pattern: "*.Peak"
      ],
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-d ${params.max_feature_dist_sharp}"
  }

  withName: 'frip' {
    publishDir = [
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        pattern: "*.tsv"
      ]
    ]
  }

  //withName: 'multiqc' {
  //  publishDir = [
  //    [
  //      path: { "${params.outDir}/multiqc" },
  //      mode: 'copy',
  //      pattern: "*report.html"
  //    ]
  //  ]
  //}

}