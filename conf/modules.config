/*
 * Define modules options
 */


process {

  // Default commenter pour ne pas avoir les dossiers par defauts 
  //publishDir = [
  //  path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
  //  mode: 'copy',
  //  saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  //]

  /* BARCODES EXTRACTION */

  withName: 'getBarcodes' {
    ext.prefix = { "${meta.id}_${meta.index_id}" }
  }

  withName: 'alignBarcodes' {
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_${metaBc.id}_part${meta.chunk}" : "${meta.id}_${metaBc.id}" }
    ext.args = '-N 1 -L 8 --rdg 0,7 --rfg 0,7 --mp 7,7 --ignore-quals --score-min L,0,-1 -t --no-hd --reorder'
  }

  withName: 'addBarcodes' {
    publishDir = [
      path: { "${params.outDir}/fastq" },
      mode: 'copy',
      pattern: "*fastq.gz",
      enabled: params.saveIntermediates
    ]
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
  }

  withName: 'joinBcIndexes' {
    publishDir = [
      path: { "${params.outDir}/barcodes" },
      mode: 'copy',
      pattern: "*_read_barcodes.txt"
    ]
  }

  withName: 'getBarcodesCounts' {
    publishDir = [
      path: { "${params.outDir}/barcodes" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename } 
    ]
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
  }

  withName: 'mergeBarcodes' {
    publishDir = [
      path: { "${params.outDir}/barcodes" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.prefix = { "${meta.id}_allbarcodes" }
    ext.args = { "-n" }
  }

  withName: 'cutadapt' {
    ext.prefix = { "${meta.id}_R2" }
    ext.args = { "-u 83" } // size of barcode linker for scChIP protocol
  }

  /* GENOME MAPPING */

  withName: 'starAlign' {
    publishDir = [
      [
        path: { "${params.outDir}/mapping" },
        mode: 'copy',
        pattern: "*.bam",
	enabled: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/mapping/logs" },
        mode: 'copy',
        pattern: "*out",
	enabled: params.saveIntermediates
      ]
    ]
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
    ext.args = '--outSAMtype BAM Unsorted --alignEndsType EndToEnd --winAnchorMultimapNmax 1000  --outFilterMultimapNmax 1 --alignIntronMax 1 --peOverlapNbasesMin 10 --alignMatesGapMax 450 --limitGenomeGenerateRAM 25000000000 '
  } //--outSAMtype BAM SortedByCoordinate

  withName: 'barcode2tag' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: "*.bam",
      enabled: params.saveIntermediates
    ]
    ext.prefix = { "${meta.part} > 1" ? "${meta.id}_part${meta.chunk}" : "${meta.id}" }
    ext.args = { "--tag ${params.barcodeTag}" }
  }

  //withName: 'markDuplicates' {
  //    publishDir = [
  //    path: { "${params.outDir}/markduplicates" },
  //    mode: 'copy'
  //  ]
  //  ext.args = { "-CREATE_INDEX true -REMOVE_DUPLICATES false -ASSUME_SORTED true -PROGRAM_RECORD_ID null -VALIDATION_STRINGENCY LENIENT -BARCODE_TAG ${params.barcodeTag}" }
  //}

  withName: 'samtoolsMerge' {
    ext.args = '-c -r'
  }

  withName: 'mappingStat' {
    ext.prefix = { "${meta.id}_mapping" }
  }

  withName: 'samtoolsFixmate' {
    ext.args = '-m'
  }

  withName: 'samtoolsMarkdup' {
      publishDir = [
      path: { "${params.outDir}/markduplicates" },
      mode: 'copy'
    ]
    ext.args = { "-s --barcode-tag ${params.barcodeTag} --no-PG" }
  }

  withName: 'samtoolsFlagstat'{
    ext.prefix = { "${bam.baseName}" }
  }

  withName: 'removeExtraDup' {
    publishDir = [
      [
        path: { "${params.outDir}/markduplicates" },
        mode: 'copy',
        pattern: "*.bam",
	enables: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/markduplicates" },
        mode: 'copy',
        pattern: "*log"
      ]
    ]
    ext.args = [
      "-d ${params.distDup}",
      params.keepRTdup ? "" : "--rt"
    ].join(' ').trim()
  }

  withName: 'samtoolsFilter' {
    publishDir = [
      path: { "${params.outDir}/filtering" },
      mode: 'copy',
      pattern: "*.bam"
    ]
    ext.prefix = { "${meta.id}" }
    ext.args = [
      params.rmSingleton ? "-F 0x004 -F 0x0008 -f 0x001" : "-F 0x004",
      params.keepDups ? "" : "-F 0x0400",
      params.mapq > 0 ? "-q ${params.mapq}" : ""
    ].join(' ').trim()
  }

  withName: 'samtoolsIndex' {
    publishDir = [
      path: { "${params.outDir}/filtering" },
      mode: 'copy',
      pattern: "*.bai"
    ]
  }

  withName: 'weightedDistrib' {
    publishDir = [
      [
        path: { "${params.outDir}/whist" },
        mode: 'copy',
        pattern: "*.mqc"
      ],
      [
        path: { "${params.outDir}/whist" },
        mode: 'copy',
        pattern: "*.pdf"
      ],
      [
        path: { "${params.outDir}/whist" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
  }

  withName: 'samtoolsSortByName' {
    ext.args = "-n"
  }

  withName: 'bamToFrag' {
    publishDir = [
      [
        path: { "${params.outDir}/fragmentFiles" },
        mode: 'copy',
        pattern: "*.gz"
      ]
    ]
    ext.args = { "--se --tag ${params.barcodeTag} --gzip -v" }
  }

  withName: 'rmBlackList' {
    ext.args = "-v"
    ext.when = { ! params.keepBlackList }
  }


  //Subworkflow: countMatrices
  withName: 'countMatricesPerBin' {
    publishDir = [
      [
        path: { "${params.outDir}/countMatrices" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/countMatrices" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-f ${params.minReadsPerCellmatrix} --tag ${params.barcodeTag} -v"
  }

  withName: 'countMatricesPerFeature' {
    publishDir = [
      [
        path: { "${params.outDir}/countMatrices" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/countMatrices" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.prefix = { "${meta.id}_TSS" }
    ext.args = "-f ${params.minReadsPerCellmatrix} --tag ${params.barcodeTag} -v"
  }

  //Subworkflow: bigwig
  withName: 'deeptoolsBamCoverage' {
    publishDir = [
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        pattern: "*.bigwig"
      ],
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "--normalizeUsing CPM --ignoreForNormalization chrX --binSize 50 --smoothLength 500 --extendReads 150"
  }

  withName: 'deeptoolsComputeMatrix' {
    ext.args = "--downstream 2000 --upstream 2000 --skipZeros --binSize 100"
  }

  // Subworkflow: peakCalling
  withName: 'macs2' {
    publishDir = [
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        pattern: "*.Peak"
      ],
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = params.macs2Opts ?: ''
  }

  withName: 'bedtoolsMerge' {
    publishDir = [
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        pattern: "*.Peak"
      ],
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-d ${params.peakDist}"
    ext.prefix = { "${bed.baseName}" }
  }

  withName: 'frip' {
    publishDir = [
      [
        path: { "${params.outDir}/peakCalling" },
        mode: 'copy',
        pattern: "*.tsv"
      ]
    ]
  }

  withName: 'multiqc' {
    publishDir = [
      path: { "${params.outDir}/multiqc/" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  /***************
   * Utils
   ***************/

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

}