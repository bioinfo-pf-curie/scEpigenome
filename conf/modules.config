/*
 * Define modules options
 */


process {

  // Default
  publishDir = [
    path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  ]

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

  withName: 'bcAlign' {
    publishDir = [
      [
        path: { "${params.outDir}/bcAlign" },
        mode: 'copy',
        pattern: "*._ReadsMatchingSorted.txt"
      ],
      [
        path: { "${params.outDir}/bcAlign" },
        mode: 'copy',
        pattern: "*_count_index.txt"
      ],
      [
        path: { "${params.outDir}/bcAlign" },
        mode: 'copy',
        pattern: "*Bowtie2.log"
      ],
      [
        path: { "${params.outDir}/bcAlign" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
  }

  withName: 'bcSubset' {
    publishDir = [
      [
        path: { "${params.outDir}/bcSubset" },
        mode: 'copy',
        pattern: "*_read_barcodes.txt"
      ],
      [
        path: { "${params.outDir}/bcSubset" },
        mode: 'copy',
        pattern: "*_bowtie2.log"
      ]
    ]
  }

  withName: 'bcTrim' {
    publishDir = [
      [
        path: { "${params.outDir}/bcTrim" },
        mode: 'copy',
        pattern: "*.fastq.gz"
      ],
      [
        path: { "${params.outDir}/bcTrim" },
        mode: 'copy',
        saveAs: {filename -> "logs/$filename"},
        pattern: "*log"
      ],
      [
        path: { "${params.outDir}/bcTrim" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = '--alignEndsType EndToEnd --outSAMtype BAM SortedByCoordinate --winAnchorMultimapNmax 1000  --outFilterMultimapNmax 1 --alignIntronMax 1 --peOverlapNbasesMin 10 --alignMatesGapMax 450 --limitGenomeGenerateRAM 25000000000 '
  }

  withName: 'starAlign' {
    publishDir = [
      [
        path: { "${params.outDir}/starAlign" },
        mode: 'copy',
        pattern: "*.bam"
      ],
      [
        path: { "${params.outDir}/starAlign" },
        mode: 'copy',
        saveAs: {filename -> "logs/$filename"},
        pattern: "*out"
      ],
      [
        path: { "${params.outDir}/starAlign" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = '--alignEndsType EndToEnd --outSAMtype BAM SortedByCoordinate --winAnchorMultimapNmax 1000  --outFilterMultimapNmax 1 --alignIntronMax 1 --peOverlapNbasesMin 10 --alignMatesGapMax 450 --limitGenomeGenerateRAM 25000000000 '
  }

  withName: 'addBarcodeTag' {
    publishDir = [
      [
        path: { "${params.outDir}/addBarcodeTag" },
        mode: 'copy',
        pattern: "*.bam"
      ]
    ]
  }

  withName: 'removePCRdup' {
    publishDir = [
      [
        path: { "${params.outDir}/removePCRdup" },
        mode: 'copy',
        pattern: "*.bam"
      ],
      [
        path: { "${params.outDir}/removePCRdup" },
        mode: 'copy',
        pattern: "*.sam"
      ],
      [
        path: { "${params.outDir}/removePCRdup" },
        mode: 'copy',
        pattern: "*_count_PCR_duplicates.txt"
      ],
      [
        path: { "${params.outDir}/removePCRdup" },
        mode: 'copy',
        pattern: "*_countR1unmappedR2.txt"
      ],
      [
        path: { "${params.outDir}/removePCRdup" },
        mode: 'copy',
        pattern: "*_flagged.sorted.bam"
      ]
    ]
  }

  withName: 'removeRTdup' {
    publishDir = [
      [
        path: { "${params.outDir}/removeRTdup" },
        mode: 'copy',
        pattern: "*.bam"
      ],
      [
        path: { "${params.outDir}/removeRTdup" },
        mode: 'copy',
        pattern: "*_count_RT_duplicates.txt"
      ]
    ]
  }

  withName: 'removeWindowDup' {
    publishDir = [
      [
        path: { "${params.outDir}/removeWindowDup" },
        mode: 'copy',
        pattern: "*.bam"
      ],
      [
        path: { "${params.outDir}/removeWindowDup" },
        mode: 'copy',
        pattern: "*_removeWindowDup.log"
      ]
    ]
  }

  withName: 'removeBlackRegions' {
    publishDir = [
      [
        path: { "${params.outDir}/removeBlackRegions" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ],
      [
        path: { "${params.outDir}/removeBlackRegions" },
        mode: 'copy',
        pattern: "*BlackReg.bam"
      ],
      [
        path: { "${params.outDir}/removeBlackRegions" },
        mode: 'copy',
        pattern: "*BlackReg.bam.bai"
      ],
      [
        path: { "${params.outDir}/removeBlackRegions" },
        mode: 'copy',
        pattern: "*_rmDup.sam"
      ],
      
    ]
  }

  withName: 'countSummary' {
    publishDir = [
      [
        path: { "${params.outDir}/countSummary" },
        mode: 'copy',
        pattern: "*.log"
      ],
      [
        path: { "${params.outDir}/countSummary" },
        mode: 'copy',
        pattern: "*.txt"
      ]
    ]
  }

  withName: 'distribUMIs' {
    publishDir = [
      [
        path: { "${params.outDir}/distribUMIs" },
        mode: 'copy',
        pattern: "*.mqc"
      ],
      [
        path: { "${params.outDir}/distribUMIs" },
        mode: 'copy',
        pattern: "*.pdf"
      ],
      [
        path: { "${params.outDir}/distribUMIs" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
  }

  withName: 'bamToFrag' {
    publishDir = [
      [
        path: { "${params.outDir}/bamToFrag" },
        mode: 'copy',
        pattern: "*.gz"
      ]
    ]
  }

  //SubWorkflow countMatricesPerBin
  withName: 'createBinMatrices' {
    publishDir = [
      [
        path: { "${params.outDir}/BinMatrices" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/BinMatrices" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-f ${params.minReadsPerCellmatrix} --tag XB -v"
  }

  //SubWorkflow countMatricesPerTSS
  withName: 'createTssMatrices' {
    publishDir = [
      [
        path: { "${params.outDir}/TssMatrices" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/TssMatrices" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.args = "-f ${params.minReadsPerCellmatrix} --tag XB  -v"
  }

  withName: 'bigwig' {
    publishDir = [
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        pattern: "*.bw"
      ],
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        pattern: "*_bamToBigWig.log"
      ],
      [
        path: { "${params.outDir}/bigwig" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
  }

}